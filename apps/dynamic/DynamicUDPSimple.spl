/*
 * Copyright (c) 2021 Xavier R. Gu√©rin xguerin@users.noreply.github.com
 * 
 * Permission to use, copy, modify, and distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright
 * notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

namespace apps.dynamic;

type Data = uint64 id, int32 channel, int32 maxChannels;

composite DynamicUDPSimple {
graph
  stream<Data> Source = Beacon() {
    output Source: id=IterationCount(), channel=-1, maxChannels=-1;
    config placement: partitionIsolation;
  }

  stream<Data> SourceProtector = Functor(Source) {
    config placement: partitionIsolation;
  }

  @parallel(width=5)
  stream<Data> Op = Custom(SourceProtector) { 
    logic

    onTuple SourceProtector: {
      submit({ id=SourceProtector.id
             , channel=getChannel()
             , maxChannels=getMaxChannels()
             }, Op);
    }

    config placement: partitionIsolation;
  }

  stream<Data> MergePoint = Functor(Op) {
    config placement: partitionIsolation;
  }

  stream<boolean go> Reset = Beacon() {
    param period: 10.0;
    config placement: partitionIsolation;
  }

  stream<Data> Seen = Custom(MergePoint as In; Reset as Update) {
    logic

    state: {
      mutable map<int32, In> _seen;
    }

    onTuple In: {
      if (!(In.channel in _seen)) {
        _seen[In.channel] = In;
        println("channel " + (rstring)In.channel + ", tuple " + (rstring)In);
        submit(In, Seen);
      }
    }

    onTuple Update: {
      println("clearing _seen");
      clearM(_seen);
    }

    config placement: partitionIsolation;
  }

  () as Sink = Custom(Seen) {
    logic

    onTuple Seen: {
      println(Seen);
    }

    config placement: partitionIsolation;
  }
}
